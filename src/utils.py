"""
Utility functions for API key validation and management
"""

import rich
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from vendors.base import BaseVendor

def check_key_with_vendor(vendor: "BaseVendor", api_key: str) -> str:
    """
    ‰ΩøÁî®ÊåáÂÆöÂéÇÂïÜÈ™åËØÅAPIÂØÜÈí•ÔºåÂπ∂ÈõÜÊàêÊô∫ËÉΩÁä∂ÊÄÅÁÆ°ÁêÜ
    
    Args:
        vendor: ÂéÇÂïÜÂÆû‰æã
        api_key: Ë¶ÅÈ™åËØÅÁöÑAPIÂØÜÈí•
        
    Returns:
        str: È™åËØÅÁä∂ÊÄÅ
    """
    from key_status_manager import get_key_status_manager
    
    status_manager = get_key_status_manager()
    
    # ÊâßË°åÂØÜÈí•È™åËØÅ
    status = vendor.validate_key(api_key)
    
    # Êõ¥Êñ∞ÂØÜÈí•Áä∂ÊÄÅÂà∞ÁÆ°ÁêÜÂô®
    status_manager.update_key_status(api_key, status, vendor.name)
    
    # Â¶ÇÊûúÊòØ‰∏¥Êó∂ÊÄßÈîôËØØÔºåÊ†áËÆ∞‰∏∫ÂèØÈáçËØï
    if status in ["rate_limit_exceeded", "resource_exhausted", "service_unavailable", 
                  "internal_error", "insufficient_quota", "unknown_error"]:
        # ‰∏çÁ´ãÂç≥Ê†áËÆ∞ÈáçËØïÔºåËÆ©Áä∂ÊÄÅÁÆ°ÁêÜÂô®ÂÜ≥ÂÆöÈáçËØïÊó∂Êú∫
        pass
    
    return status


def recheck_failed_keys(vendor: "BaseVendor") -> tuple[int, int]:
    """
    ÈáçÊñ∞Ê£ÄÊü•Â§±Ë¥•ÁöÑÂØÜÈí•Ôºå‰ªÖÊ£ÄÊü•ÈÇ£‰∫õÂèØ‰ª•ÈáçËØïÁöÑ
    
    Args:
        vendor: ÂéÇÂïÜÂÆû‰æã
        
    Returns:
        tuple[int, int]: (ÈáçÊñ∞Ê£ÄÊü•ÁöÑÂØÜÈí•Êï∞Èáè, ÊÅ¢Â§çÁöÑÂØÜÈí•Êï∞Èáè)
    """
    from key_status_manager import get_key_status_manager
    from manager import DatabaseManager
    
    status_manager = get_key_status_manager()
    
    # Ëé∑ÂèñËØ•ÂéÇÂïÜÁöÑÊï∞ÊçÆÂ∫ìÁÆ°ÁêÜÂô®
    db_manager = DatabaseManager(vendor.get_database_filename(), vendor.name)
    
    with db_manager as mgr:
        # Ëé∑ÂèñÊâÄÊúâÈùûÂèØÁî®Áä∂ÊÄÅÁöÑÂØÜÈí•
        failed_keys = mgr.get_keys_by_status(['authentication_error', 'permission_denied', 
                                            'rate_limit_exceeded', 'resource_exhausted',
                                            'insufficient_quota', 'service_unavailable',
                                            'internal_error', 'unknown_error'])
    
    if not failed_keys:
        rich.print(f"üìã No failed keys found for {vendor.name}")
        return 0, 0
    
    # ËøáÊª§Âá∫ÂèØÈáçËØïÁöÑÂØÜÈí•
    retryable_keys = []
    for key_data in failed_keys:
        api_key = key_data[0]  # ÂÅáËÆæÂØÜÈí•ÊòØÁ¨¨‰∏Ä‰∏™Â≠óÊÆµ
        if status_manager.should_retry_key(api_key):
            retryable_keys.append(api_key)
    
    if not retryable_keys:
        rich.print(f"‚è∞ No keys ready for retry for {vendor.name}")
        return 0, 0
    
    rich.print(f"üîÑ Rechecking {len(retryable_keys)} retryable keys for {vendor.name}...")
    
    recovered_count = 0
    
    for api_key in retryable_keys:
        rich.print(f"üîç Rechecking key {api_key[:10]}...")
        
        # Ê†áËÆ∞ÂºÄÂßãÈáçËØï
        status_manager.mark_key_for_retry(api_key)
        
        # ÈáçÊñ∞È™åËØÅÂØÜÈí•
        new_status = check_key_with_vendor(vendor, api_key)
        
        # Êõ¥Êñ∞Êï∞ÊçÆÂ∫ìÁä∂ÊÄÅ
        with db_manager as mgr:
            mgr.update_key_status(api_key, new_status)
        
        if new_status == "yes":
            recovered_count += 1
            rich.print(f"‚úÖ Key {api_key[:10]}... recovered!")
        else:
            rich.print(f"‚ùå Key {api_key[:10]}... still failed: {new_status}")
    
    rich.print(f"üìä Recheck summary for {vendor.name}: {recovered_count}/{len(retryable_keys)} keys recovered")
    
    return len(retryable_keys), recovered_count


def get_key_status_report() -> str:
    """
    ÁîüÊàêÂØÜÈí•Áä∂ÊÄÅÊä•Âëä
    
    Returns:
        str: Ê†ºÂºèÂåñÁöÑÁä∂ÊÄÅÊä•Âëä
    """
    from key_status_manager import get_key_status_manager
    
    status_manager = get_key_status_manager()
    
    # Ëé∑ÂèñÊï¥‰ΩìÁä∂ÊÄÅÊëòË¶Å
    overall_summary = status_manager.get_status_summary()
    vendor_summary = status_manager.get_vendor_summary()
    
    report_lines = []
    report_lines.append("üîë API Key Status Report")
    report_lines.append("=" * 40)
    
    # Êï¥‰ΩìÁªüËÆ°
    report_lines.append("\nüìä Overall Statistics:")
    for status, count in overall_summary.items():
        status_icon = {
            "yes": "‚úÖ",
            "authentication_error": "‚ùå",
            "permission_denied": "üö´", 
            "rate_limit_exceeded": "‚ö†Ô∏è",
            "resource_exhausted": "üî•",
            "insufficient_quota": "üí∞",
            "service_unavailable": "üîß",
            "internal_error": "‚öôÔ∏è",
            "unknown_error": "‚ùì"
        }.get(status, "‚ùî")
        
        report_lines.append(f"  {status_icon} {status}: {count}")
    
    # ÊåâÂéÇÂïÜÁªüËÆ°
    report_lines.append("\nüè≠ By Vendor:")
    for vendor_name, vendor_stats in vendor_summary.items():
        report_lines.append(f"\n  üìÇ {vendor_name}:")
        for status, count in vendor_stats.items():
            status_icon = {
                "yes": "‚úÖ",
                "authentication_error": "‚ùå",
                "permission_denied": "üö´",
                "rate_limit_exceeded": "‚ö†Ô∏è", 
                "resource_exhausted": "üî•",
                "insufficient_quota": "üí∞",
                "service_unavailable": "üîß",
                "internal_error": "‚öôÔ∏è",
                "unknown_error": "‚ùì"
            }.get(status, "‚ùî")
            
            report_lines.append(f"    {status_icon} {status}: {count}")
    
    # ÂèØÈáçËØïÂØÜÈí•ÁªüËÆ°
    retryable_keys = status_manager.get_retryable_keys()
    if retryable_keys:
        report_lines.append(f"\nüîÑ Retryable Keys: {len(retryable_keys)}")
    
    return "\n".join(report_lines)


# Legacy function for backward compatibility
def check_key(api_key: str) -> str:
    """
    Legacy function for Gemini key validation
    
    This function is deprecated. Use check_key_with_vendor instead.
    """
    from vendor_factory import VendorFactory
    
    factory = VendorFactory()
    gemini_vendor = factory.get_vendor('gemini')
    
    if gemini_vendor:
        return check_key_with_vendor(gemini_vendor, api_key)
    else:
        rich.print("[bold red]‚ùå Gemini vendor not available[/bold red]")
        return "unknown_error"
